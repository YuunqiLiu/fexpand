#!/usr/bin/env python
from pcpp import preprocessor, PathRecord, InfoList, fexpand_file_tree



import argparse
import sys, os




parser = argparse.ArgumentParser(prog='fexpand',
            description=
    '''A pure Python based Filelist preprocessor implementation 
    very useful for pre-preprocessing hierarchical fielist into single 
    filelist without "-f" index, macros, environment variables and comments.''',
            epilog=
    '''Note that fexpand expands all environment variables that are present 
    (those that are not present are left in place). 
    Similarly, all paths are converted to absolute paths 
    (non-existing files are left as they are). Fexpand supports most of the c99 macro syntax.
    
    (FEXPAND VERSION 1.3)''')
parser.add_argument('-i', '--input', help='input filelist path', required=True)
parser.add_argument('-o', '--output', help='output expanded filelist path', default='expanded_filelist.f')
parser.add_argument('-oh', '--output-vhdl', help='output_expanded filelist only contain .vhd or .vhdl', default="")
parser.add_argument('-D', dest = 'defines', metavar = 'macro[=val]', nargs = 1, action = 'append', help = 'Predefine name as a macro [with value]',default=[])
#parser.add_argument('-h', '--help', action='help', help='show this help message and exit')

args = parser.parse_args()

print(f'[FEXPAND] Start:')
print(f'[FEXPAND] Input  file path: {args.input}')
print(f'[FEXPAND] Output file path: {args.output}')


defines = [x[0] for x in args.defines]
print(f'[FEXPAND] Marco defined in cmd line: {defines}')
#fi_path = sys.argv[1]
#fo_path = sys.argv[2]

#print(fi_path)
#print(fo_path)


fi = open(args.input,'r')

din = fi.read()


fexpand_file_tree.CURRENT_FILE_NODE = fexpand_file_tree.FileTreeNode(' ',args.input)
PathRecord.CURRENT_FILE = os.path.abspath(args.input)
p = preprocessor.Preprocessor()


for d in defines:
    if '=' not in d:
        d += '=1'
    d = d.replace('=', ' ', 1)
    p.define(d)

p.parse(din)
res = p.analyze()
InfoList.print()
#print(fexpand_file_tree.CURRENT_FILE_NODE.string())

#for r in res:
#    print(r)




main_flist = []
vhdl_flist = []
lines = res.split('\n')

for l in lines:
    if args.output_vhdl != "" and (l.endswith("vhd") or l.endswith("vhdl")):
        vhdl_flist.append(l)
    else:
        main_flist.append(l)

with open(args.output,'w') as f:
    f.writelines('\n'.join(main_flist))


if args.output_vhdl != "":
    with open(args.output_vhdl,'w') as f:
        f.writelines('\n'.join(vhdl_flist))


